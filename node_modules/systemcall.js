(function () {

    var CONFIG_CONST = require('configconst');
	
	var fs = require('fs');
    var path = require('path');
    var globalval = require('globalval');
    var eclog = require('eclog');

    /*
    * @method exec 执行一个shell命令,在程序结束时返回回调结果,exec会启动一个shell(/bin/sh)环境, 解释并运行cmd命令
    *　　　　　　　　　　　　　 根据退出值判定是否执行成功
    *              注意！如果需要kill　shell启动的子进程，那么　不能　调用此方法,因为这里的pid为新启动的shell pid
    *           　　　当cp.kill时，只会关闭shell, 而不会关闭子程序
    * @param cmd {string} 命令
    * @param callbackSuccess {funcation}( stdout{Buffer} )
    * @param callbackFaile {funcation}(error{object})
    */
    function exec(cmd, callbackSuccess, callbackFaile, options){
        var nodeExec= require("child_process").exec;    

		var defaultOptions = {timeout : CONFIG_CONST.getval('CHILD_PROCESS_TIME_OUT')};
        
        if (options == undefined){
            options = defaultOptions;
        }        	
        
        var cp = nodeExec(cmd, options, function(error, stdout, stderr){
            
            if(error){
                callbackFaile(error);				
            }else{       
                callbackSuccess(stdout);
            }            
        });    

        cp.on('error', function (error) {
            eclog.log('exec cp on error');
        });

		return cp.pid;
    }
    
    /*
    * @method mkdirSync  同步递归建立文件
    * @param dirpath {string} 文件夹路径
    * @param rootpath {string} 文件夹路径的根目录
    */
    var mkdirSync = function(dirpath, rootpath) {
        dirpath.split('/').reduce(
            function(pre, cur) {
                var p = path.resolve(pre, cur);
                if(!fs.existsSync(p)){
                    fs.mkdirSync(p);  
                }
                return p;
            },
            rootpath
        );
    };
	
	/*
    * @method setSessionconf 设置session.conf信息
    * adesk-config session set --twfid * --sslctx * --username *
    * {"twfid": "*", "sslctx": "*", "username ": *}
    */
	function setSessionconf(data, callbackSuccess, callbackFaile) {
		var error = {};
		if (data != null) {
			var cmd = [
				CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
				'session', 'set',
				'--twfid', data.twfid,
				'--sslctx', data.sslctx,
				'--username', data.username
			].join(' ');
			
			exec(cmd, callbackSuccess, callbackFaile);
		} else {
			error.message = 'Invalid session data';
			callbackFaile(error);
		}
	}
	
	/*
    * @method getSessionconf 获取session.conf信息
    * adesk-config session get --twfid --sslctx --username
	* adesk-config session get --all
    * {"twfid": "*", "sslctx": "*", "username ": *}
    */
	function getSessionconf(callbackSuccess, callbackFaile) {
		var cmd = [
			CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
			'session', 'get', '--all'
		].join(' ');
      
	    exec(cmd, callbackSuccess, callbackFaile);
	}
	
	/*
    * @method setVDCConf 设置vdc.conf信息
    * adesk-config vdc set --host * --port * --password * --ip *
    * {"protocol": "*", "host": "*", "port": "*", "pwd ": *}
    */
	function setVDCConf(data, callbackSuccess, callbackFaile) {
		var error = {};
		if (data != null) {
			var cmd = [
				'adesk-config', 'vdc', 'set',
				'--host', data.host,
				'--port', data.port,
				'--orgurl', data.orgurl
			];
			if (data.password.length > 0) {
				cmd.push('--password');
				cmd.push(data.password);
			}
			cmd = cmd.join(' ');
			
			exec(cmd, callbackSuccess, callbackFaile);
		} else {
			error.message = 'Invalid center address data';
			callbackFaile(error);
		}
	}

    /*
	*	{"signal": "info_config", "params": {"module": "policy"}}
	*	adesk-config policy set --configpwd * --configreqpwd * --logininforeqpwd * // 由agent设置
	*	adesk-config policy get --all // 获取
	*	{"configpwd": "md5值", "configreqpwd": "1", "logininforeqpwd": "0"}
     */
	function getpolicyconf(success, fail){
		var cmd = [CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
					'policy', 'get', '--all'
		].join(' ');

		var jsondata = '{"configpwd": "e10adc3949ba59abbe56e057f20f883e", "configreqpwd": "1", "logininforeqpwd": "1"}';
		success(jsondata);
		//exec(cmd, success, fail);
	}

    /*
    * @method getuserconf 获取user.conf信息
    * adesk-config user set --name * --password * --autologin *
    * adesk-config user get --name --password --autologin
    * adesk-config user get --all
    * {"name": "*", "password": "*", "autologin ": *}
     */
    function getuserconf(success, fail){  
		var cmd = [
			CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
            'user', 'get', '--all'
		].join(' ');

        exec(cmd, success, fail);
    }

    /*
    * @method setuserconf 获取user.conf信息
    * adesk-config user set --name * --password * --autologin *
    * adesk-config user get --name --password --autologin
    * adesk-config user get --all
    * adesk-config user unset --all
    * {"name": "*", "password": "*", "autologin ": *}
     */
    function setuserconf(data, success, fail){
		var error = {};

		if (data != null) {

			//特殊处理双引号
			var name = '\"' + data.name + '\"';
			var password = data.password;
			password  = password.replace(/\"/g, '\\\"');
			password = '\"' + password + '\"';

			var cmd = [
				CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
				'user', 'set',
				'--name', name,
				'--password', password,
				'--autologin', data.autologin
			].join(' ');

			exec(cmd, success, fail);
		} else {
			error.message = 'Invalid user data';
			fail(error);
		}
    }
    /*
    * @method getSelectURL 获取vdc.conf
    * adesk-config vdc get --host --port --password --ip
    * adesk-config vdc get --all
    * adesk-config vdc set --host * --port * --password * --ip *
    * {"host": "*", "port": *, "password": "*","ip":"*"}
     */
    function getSelectURL(success,fail){
		var cmd = [
			CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
			'vdc', 'get', '--all'
		].join(' ');
		
        exec(cmd, success, fail);
    }
    /*
    * @method setNetwork 设置IP,子网,网关,DNS1,DNS2
    * @param cmd {obj} 设置的值,例子如下:
    * @param 自动获取 ipOptions = {mode : 'dhcp'} 
    * @param 静态设置 ipOptions = {mode : 'static', address : 'value', netmask : 'value', \
                                 gateway : 'value', dns1 : 'value', dns2 : value}
    * @param callbackSuccess {funcation}( stdout{Buffer} )
    * @param callbackFaile {funcation}( error{object})
    */
    function setNetwork(ipOptions, callbackSuccess, callbackFaile){
        
        var rError = {}
        var cmd;

        if (ipOptions.mode == 'dhcp') {	
			cmd = [
				CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
				'network', 'set',
				'--iface', 'eth0',
				'--mode', ipOptions.mode
			].join(' ');
        } else if (ipOptions.mode == 'static') {
			cmd = [
				CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
				'network', 'set',
				'--iface', 'eth0',
				'--mode', ipOptions.mode,
				'--address', ipOptions.address,
				'--netmask', ipOptions.netmask,
				'--gateway', ipOptions.gateway,
				'--dns1', ipOptions.dns1
			];
			if (typeof ipOptions.dns2 != 'undefined') {
				cmd.push('--dns2');
				cmd.push(ipOptions.dns2);
			}
			cmd = cmd.join(' ');
        } else {
            rError.message = "wrong network mode";
            callbackFaile(rError);
            return;
        }

        exec(cmd, callbackSuccess, callbackFaile);
    }

    /*
    * @method getNetwork
    * adesk-config network get --iface eth0 --mode --address --netmask --gateway --dns1 --dns2
      #返回eth0所有配置
      adesk-config network get --iface eth0 --all
      标准输出JSON格式结果，可以单独获取某一个值
      {"mode": "*", "address": "*", "netmask": "*", "gateway": "*", "dns1": "*", "dns2": "*"}
    */
    function getNetwork(success,fail){
        var cmd = [
			CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
			'network', 'get', 
			'--iface', 'eth0', '--all'
        ].join(' ');
		
        exec(cmd,success,fail);
    }
    /*
    * setVolume 设置音量
    * cmd {obj} 设置的值,例子如下:
    * ipOptions = {volume : '81'} 
    * callbackSuccess {funcation}( stdout{Buffer} )
    * callbackFaile {funcation}(error{object})
    */
    function setVolume(ipOptions, callbackSuccess, callbackFaile){
                
    }

    /*
    * setData 设置日期
    * cmd {obj} 设置的值,例子如下:
    * ipOptions = {} 
    * callbackSuccess {funcation}( stdout{Buffer} )
    * callbackFaile {funcation}( stderr{Buffer} error{object})
    */
    function setDate(ipOptions, callbackSuccess, callbackFaile){
                
    }
	
	/*
	* 切换输入法
	 */
	function switchTypeWrite(callbackSuccess,callbackFaile){
		var cmd = [
		 'xdotool','key','ctrl+space'
		].join(' ');
		console.log(cmd);
		exec(cmd,callbackSuccess,callbackFaile);

	}
	 /*
	}
    * queryVDesktop 从vdictrl获取虚拟机配置数据
    * cmd {obj} 设置的值,例子如下:
    * ipOptions = {} 
    * callbackSuccess {funcation}( stdout{Buffer} )
    * callbackFaile {funcation}( stderr{Buffer} error{object})
    */
	function queryVDesktop(data, callbackSuccess, callbackFaile) {
		var error = {};
		if (data != null) {
			var cmd = [
				'adesk-client', 'vdesktop',
				'-q', '-i', data.resid
			].join(' ');
			eclog.log(cmd);
			exec(cmd, callbackSuccess, callbackFaile);
		} else {
			error.message = 'Invalid resid';
			callbackFaile(error);
		}
	}
	
	/*
    * writeConfXMLSync 将获取的conf.xml写入配置文件，
    */
	function writeConfXMLSync(data) {
		try {
			var fd = fs.openSync(CONFIG_CONST.getval('CONF_XML_PATH'), 'w', '0777');
		} catch(error) {
			eclog.log('openConfXMLSync failed');
			return false;
		}
		try {
			fs.writeFileSync(CONFIG_CONST.getval('CONF_XML_PATH'), data);
			if (fd) {
				fs.closeSync(fd);
			}
		} catch(error) {
			eclog.log('writeConfXMLSync failed');
			return false;
		}
		return true;
	}
	
	/*
	* 打开spicec
	*
	*/
	function openVDesktop(data, callbackSuccess, callbackFaile) {
		var error = {};
		if (data != null) {
			var cmd = [
				'adesk-spicec',
				'-h', data.ip,
				'-p', data.port,
				'-i', data.vmid,
				'--conf-file', CONFIG_CONST.getval('CONF_XML_PATH'),
				'-f'
			].join(' ');
			
			//exec(cmd, callbackSuccess, callbackFaile);
            //spicec不需要超时处理
			return exec(cmd, callbackSuccess, callbackFaile, {});
           
		} else {
			error.message = "get spiece config failed";
			callbackFaile(error);
		}
	}
	
	/*
	* 重置虚拟机
	*
	*/
	function resetVDesktop(data, callbackSuccess, callbackFaile) {
		var error = {};
		if (data != null) {
			var cmd = [
				'adesk-client', 'vdesktop',
				'-r', '-i', data.resid
			].join(' ');
			eclog.log('resetVDesktop: ' + cmd);
			exec(cmd, callbackSuccess, callbackFaile);
		} else {
			error.message = 'Invalid resid';
			callbackFaile(error);
		}
	}
	
	function openWifi(callbackSuccess, callbackFaile) {
		var cmd = [
			CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
			'network', 'set',
			'--iface', 'wlan0',
			'--enable', '1'
		].join(' ');
		
		exec(cmd, callbackSuccess, callbackFaile);
	}
	
	function closeWifi(callbackSuccess, callbackFaile) {
		var cmd = [
			CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
			'network', 'set',
			'--iface', 'wlan0',
			'--enable', '0'
		].join(' ');
		
		exec(cmd, callbackSuccess, callbackFaile);
	}
	
	function getWifi(callbackSuccess, callbackFaile) {
		var cmd = [
			CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
			'network', 'get',
			'--iface', 'wlan0', '--all'
		].join(' ');
		
		exec(cmd, callbackSuccess, callbackFaile);
	}
	
	function connectWifi(data, callbackSuccess, callbackFaile) {
		var error = {};
		if (data != null) {
			var cmd = [
				CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
				'network', 'set',
				'--iface', 'wlan0',
				'--connect', data.ssid,
				'--authtype', data.authtype
			];
			if (typeof data.password != 'undefined') {
				cmd.push('--password');
				cmd.push(data.password);
			}
			cmd = cmd.join(' ');
			return exec(cmd, callbackSuccess, callbackFaile);
		} else {
			error.message = 'Invalid wifi data';
			callbackFaile(error);
			return -1;
		}
	}
	
	function disconnectWifi(callbackSuccess, callbackFaile) {
		var cmd = [
			CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
			'network', 'set',
			'--iface', 'wlan0', '--disconnect'
		].join(' ');
		
		exec(cmd, callbackSuccess, callbackFaile);
	}
	
	function supportWifi(callbackSuccess, callbackFaile) {
		var cmd = [
			CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
			'network', 'get',
			'--iface', 'wlan0', '--supportwifi'
		].join(' ');
		
		exec(cmd, callbackSuccess, callbackFaile);
	}
	
	function getMACAddress(callbackSuccess, callbackFaile) {
		var cmd = [
			CONFIG_CONST.getval('ADESK_CONFIG_PATH'),
			'network', 'get',
			'--iface', 'eth0', '--macaddr'
		].join(' ');
		
		exec(cmd, callbackSuccess, callbackFaile);
	}

	function TestConnectVDC(data, callbackSuccess, callbackFaile) {
		var error = {};
		if (data != null) {
			var cmd = [
				'adesk-agent', '-t',
				data.host + ':' + data.port.toString() + ':' + data.password
			].join(' ');
			
			exec(cmd, callbackSuccess, callbackFaile);
		} else {
			error.message = 'Invalid center ip and password';
			callbackFaile(error);
		}
	}
	
	function getResolut(callbackSuccess, callbackFaile) {
		var cmd = [
			'xrandr', '-q'
		].join(' ');
		
		exec(cmd, callbackSuccess, callbackFaile);
	}
	
	function setSystemTime(data, callbackSuccess, callbackFaile) {
		var cmd = [
			'date', '-s', data
		].join(' ');
		console.log(cmd);
		exec(cmd, callbackSuccess, callbackFaile);
	}

	function killPsTree(pid){
		var psTree = require('ps-tree');
		var kill = function(pid,signal,callback){
			signal = signal || 'SIGKILL';
			callback = callback || function(){};
			psTree(pid,function(err,children){
				[pid].concat(children.map(function(p){
					return p.PID;
				})).forEach(function(tpid){
					try{process.kill(tpid,signal);}
					catch(ex){}
				});
				callback();
			});
		};
		kill(pid);
	}

	/*
	** 关闭盒子
	 */
	function shutdownEC(callbackSuccess,callbackFaile){
		var cmd = [
			'shutdown','-h','now'
		].join(' ');
		exec(cmd, callbackSuccess, callbackFaile);
	}

	/*
	** 重启盒子
	 */
	function rebootEC(callbackSuccess, callbackFaile){
		var cmd = "reboot";
		exec(cmd, callbackSuccess, callbackFaile);
	}

	function shutdownEC(callbackSuccess,callbackFaile){
		var cmd = [
			'shutdown','-h','now'
		].join(' ');
		exec(cmd, callbackSuccess, callbackFaile);
	}

    exports.exec                  = exec;
    exports.setNetwork            = setNetwork;
    exports.setVolume             = setVolume;
    exports.setDate               = setDate;
    exports.getuserconf           = getuserconf;
    exports.setuserconf           = setuserconf;
    exports.getSelectURL          = getSelectURL;
	exports.queryVDesktop         = queryVDesktop;
	exports.writeConfXMLSync      = writeConfXMLSync;
	exports.openVDesktop          = openVDesktop;
	exports.resetVDesktop         = resetVDesktop;
	exports.setSessionconf        = setSessionconf;
	exports.getNetwork            = getNetwork;
    exports.mkdirSync             = mkdirSync;
	exports.TestConnectVDC        = TestConnectVDC;
	exports.setVDCConf            = setVDCConf;
    exports.killPsTree            = killPsTree;
	exports.openWifi              = openWifi;
	exports.closeWifi             = closeWifi;
	exports.getWifi               = getWifi;
	exports.connectWifi           = connectWifi;
	exports.disconnectWifi        = disconnectWifi;
	exports.supportWifi           = supportWifi;
	exports.switchTypeWrite       = switchTypeWrite;
	exports.getMACAddress         = getMACAddress;
	exports.shutdownEC            = shutdownEC;
	exports.rebootEC              = rebootEC;
	exports.getResolut            = getResolut;
	exports.setSystemTime         = setSystemTime;
	exports.getpolicyconf         = getpolicyconf;
})()