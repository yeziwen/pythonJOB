//https请求模块

(function () {

    var https = require("https");
    var querystring = require('querystring');
    var globalval = require('globalval');
    var fs   = require('fs');
    /*
    * @method readFile https请求模块
    * @param options {object}  请求配置
    * @param postData {string}  POST方法传递的数据,GET方法不会处理这个参数
    * @param callbackSuccess {function}  ( res {object}, data {string} ) 
    *        成功的回调 res为响应response对象, data为文件内容
    * @param callbackFaile {function} ( res/req{object} err {object} ) 
    *        失败的回调 res/req请求或响应的对象 err为失败的内容 
    */
    function httpsRequset(options, postData ,callbackSuccess, callbackFaile) {

        var reqType = options.method;

        if(reqType == 'POST'){
            postData = querystring.stringify(postData);
            if(!options.headers){
                options.headers = {};
            }
            options.headers['Content-Type'] = 'application/x-www-form-urlencoded';
            options.headers['Content-Length'] = postData.length;
        }

        var req = https.request(options, function(res) {
            res.setEncoding('utf8');

            var resdata = "";
            res.on('data', function(chunk) {
                resdata += chunk;
            });

            res.on('end', function() {
                if(typeof callbackSuccess === "function"){
                    callbackSuccess(this, resdata);                    
                }
                console.log("response success");
            });

            res.on('error', function(err) {
                if(typeof callbackFaile === "function"){
                    callbackFaile(this, err);                    
                }
                console.log("response failed");
            });
        });

        req.on('error', function(err) {
            if(typeof callbackFaile === "function"){
                callbackFaile(this, err);                    
            }
            console.log("request failed");
        });


        if(reqType == 'POST'){
            req.write(postData);
        }
        
        req.end();
    }


    //请求二进制文件
    function httpsRequestBinary(options, postData ,callbackSuccess, callbackFaile) {

        var reqType = options.method;

        if(reqType == 'POST'){
            postData = querystring.stringify(postData);
            if(!options.headers){
                options.headers = {};
            }
            options.headers['Content-Type'] = 'application/x-www-form-urlencoded';
            options.headers['Content-Length'] = postData.length;
        }

        var req = https.request(options, function(res) {
            res.setEncoding('binary');

            var resdata = "";
            res.on('data', function(chunk) {
                resdata += chunk;
            });

            res.on('end', function() {
                if(typeof callbackSuccess === "function"){
                    var data = "0";
                    fs.writeFile(__dirname + "/../imgs/rand_code.gif", resdata, 'binary');
                    callbackSuccess(this, data);                    
                }
                console.log("response success");
            });

            res.on('error', function(err) {
                if(typeof callbackFaile === "function"){
                    callbackFaile(this, err);                    
                }
                console.log("response failed");
            });
        });

        req.on('error', function(err) {
            if(typeof callbackFaile === "function"){
                callbackFaile(this, err);                    
            }
            console.log("request failed");
        });


        if(reqType == 'POST'){
            req.write(postData);
        }
        
        req.end();
    }
    
    exports.httpsRequset = httpsRequset;
    exports.httpsRequestBinary = httpsRequestBinary;

})()